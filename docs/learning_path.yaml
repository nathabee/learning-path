My Learning Path:
  NodeJS:
    Projects:
      portfolio-website :
        Overview: "Develop a fresh and modern React portfolio website using Next.js, TypeScript, Tailwind CSS, Framer Motion, and other technologies. Project based on the Video of ByteGrad (Fresh React Portfolio Website)"
        Steps:
          - "Set up the project environment with Next.js and TypeScript."
          - "Configure Tailwind CSS for styling."
          - "Implement the UI design with responsive layouts."
          - "Integrate advanced animations using Framer Motion."
          - "Set up Context API for state management."
          - "Implement light and dark mode features."
          - "Create custom React hooks for reusable logic."
          - "Configure email sending functionality with React.Email and Resend."
          - "Test and deploy the project."
        Resources:
          - "You Tube Video : https://youtu.be/sUKptmUVIBM"
          - "Github : https://github.com/ByteGrad/portfolio-website"
          - "Next.js Documentation: https://nextjs.org/docs"
          - "TypeScript Handbook: https://www.typescriptlang.org/docs/"
          - "Tailwind CSS Documentation: https://tailwindcss.com/docs"
          - "Framer Motion API: https://www.framer.com/api/motion/"
          - "React Context API: https://reactjs.org/docs/context.html"
          - "React Email Documentation: https://react.email/"
          - "Resend Email API: https://resend.com/docs"
          - "UI Design Principles: https://www.smashingmagazine.com/2018/01/ux-design-principles/"
          - "Responsive Web Design: https://www.w3schools.com/css/css_rwd_intro.asp"
        Notes: 
          - "Plan the layout and components before starting the implementation."
          - "Utilize reusable components to maintain code consistency."
          - "Test animations and transitions for smooth user experience."
          - "Ensure accessibility features are implemented."
          - "Regularly commit changes and document progress."
        Technologie:
          Latest Next.js 13 features:
            Overview: "Understand the new features and improvements in Next.js 13, including the latest advancements in routing, server actions, and more."
            Features:
              - "App Router: Improved routing capabilities for complex applications."
              - "Server Actions: Enhance server-side rendering with custom server actions."
              - "Client & Server Components: Seamless integration and differentiation between client-side and server-side components."
            Resources:
              - "Next.js 13 Documentation: https://nextjs.org/docs"
              - "What's New in Next.js 13: https://nextjs.org/blog/next-13"
            Notes: "Experiment with each feature to understand its use cases and benefits."
          Next.js App Router:
            Overview: "Learn about the Next.js App Router for better navigation and routing within your Next.js applications."
            Features:
              - "Dynamic Routing: Handle dynamic routes with ease."
              - "Nested Routes: Implement nested routes for better structure."
              - "Route Groups: Group routes logically for cleaner code."
            Resources:
              - "Next.js Routing: https://nextjs.org/docs/routing/introduction"
              - "App Router Guide: https://nextjs.org/docs/routing/app-router"
            Notes: "Practice creating complex routing structures using the App Router."
          Next.js Server Actions:
            Overview: "Understand and utilize server actions in Next.js for server-side rendering and data fetching."
            Features:
              - "Custom Server Actions: Create custom actions to handle server-side logic."
              - "Data Fetching: Fetch data on the server and pass it to client components."
              - "Server-side Rendering: Improve performance with server-rendered pages."
            Resources:
              - "Server Actions in Next.js: https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"
              - "Next.js Server Components: https://nextjs.org/docs/advanced-features/server-components"
            Notes: "Explore how server actions can enhance your application’s performance and user experience."
          Client & Server Components:
            Overview: "Distinguish between client and server components in Next.js and understand their use cases."
            Features:
              - "Client Components: Components rendered on the client side."
              - "Server Components: Components rendered on the server side."
              - "Hybrid Components: Combining client and server components."
            Resources:
              - "Client vs. Server Components: https://nextjs.org/docs/basic-features/pages#client-and-server-rendering"
              - "Hybrid Rendering: https://nextjs.org/docs/advanced-features/static-html-export"
            Notes: "Experiment with different rendering strategies to optimize performance."
          TypeScript (Beginner & Intermediate):
            Overview: "Learn the basics and intermediate concepts of TypeScript to enhance your JavaScript projects."
            Topics:
              - "Basic Types: Understand and use basic TypeScript types."
              - "Interfaces and Types: Define interfaces and custom types."
              - "Generics: Utilize generics for flexible and reusable code."
            Resources:
              - "TypeScript Handbook: https://www.typescriptlang.org/docs/handbook/intro.html"
              - "Learn TypeScript: https://www.typescriptlang.org/docs/"
            Notes: "Apply TypeScript to your Next.js projects to ensure type safety and improve code quality."
          Tailwind CSS:
            Overview: "Use Tailwind CSS to style your applications with utility-first CSS."
            Features:
              - "Utility Classes: Style elements using utility classes."
              - "Responsive Design: Implement responsive design easily."
              - "Customization: Customize Tailwind to fit your project’s needs."
            Resources:
              - "Tailwind CSS Documentation: https://tailwindcss.com/docs"
              - "Getting Started with Tailwind CSS: https://tailwindcss.com/docs/installation"
            Notes: "Practice building responsive and modern UI components using Tailwind CSS."
          Context API:
            Overview: "Manage global state in your React applications using the Context API."
            Features:
              - "Creating Contexts: Define and use contexts to manage state."
              - "Provider Components: Wrap components with providers to access state."
              - "Consuming Context: Access context values in your components."
            Resources:
              - "React Context API: https://reactjs.org/docs/context.html"
              - "Using Context Effectively: https://kentcdodds.com/blog/how-to-use-react-context-effectively"
            Notes: "Implement the Context API in your projects to manage global state."
          Advanced Animations with Framer Motion:
            Overview: "Create advanced animations in your React applications using Framer Motion."
            Features:
              - "Basic Animations: Implement simple animations."
              - "Complex Animations: Create complex, choreographed animations."
              - "Motion Components: Use motion components to animate elements."
            Resources:
              - "Framer Motion Documentation: https://www.framer.com/motion/"
              - "Animating with Framer Motion: https://www.framer.com/docs/"
            Notes: "Explore different animation techniques to enhance your UI."
          React.Email & Resend:
            Overview: "Integrate email functionality in your React applications using React.Email and Resend."
            Features:
              - "Sending Emails: Send emails from your application."
              - "Email Templates: Create and use email templates."
              - "Handling Responses: Handle email responses and errors."
            Resources:
              - "React.Email Documentation: https://react.email/docs"
              - "Resend Documentation: https://resend.com/docs"
            Notes: "Implement email features to add communication capabilities to your app."
          Custom React hooks:
            Overview: "Create and use custom React hooks to encapsulate reusable logic."
            Features:
              - "Basic Hooks: Understand and use basic hooks."
              - "Creating Custom Hooks: Create your own hooks for reusable logic."
              - "Using Custom Hooks: Integrate custom hooks into your components."
            Resources:
              - "React Hooks Documentation: https://reactjs.org/docs/hooks-intro.html"
              - "Custom Hooks Guide: https://reactjs.org/docs/hooks-custom.html"
            Notes: "Develop custom hooks to improve code reuse and readability."
          Fresh, modern UI design:
            Overview: "Implement fresh and modern UI designs in your applications."
            Features:
              - "Design Principles: Understand key design principles."
              - "Modern UI Components: Create modern UI components."
              - "UI/UX Best Practices: Follow best practices for UI/UX design."
            Resources:
              - "UI Design Guide: https://www.smashingmagazine.com/2020/07/comprehensive-guide-ui-design/"
              - "Modern UI Design: https://uxdesign.cc/"
            Notes: "Experiment with different design approaches to create visually appealing interfaces."
          Light & Dark mode:
            Overview: "Implement light and dark mode in your applications for better user experience."
            Features:
              - "Theme Switching: Implement theme switching functionality."
              - "CSS Variables: Use CSS variables for theming."
              - "User Preferences: Respect user preferences for light/dark mode."
            Resources:
              - "Theming with CSS Variables: https://css-tricks.com/a-complete-guide-to-custom-properties/"
              - "Implementing Dark Mode: https://www.smashingmagazine.com/2020/04/dark-mode-uxtips/"
            Notes: "Ensure your application provides a seamless experience in both light and dark modes."
          Responsive website:
            Overview: "Build responsive websites that work on all devices."
            Features:
              - "Media Queries: Use media queries for responsive design."
              - "Flexible Layouts: Create flexible layouts with CSS."
              - "Responsive Components: Ensure components are responsive."
            Resources:
              - "Responsive Web Design: https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Responsive_Design"
              - "Building Responsive Layouts: https://www.smashingmagazine.com/2020/05/creating-responsive-layouts-css-grid-flexbox/"
            Notes: "Test your application on various devices to ensure responsiveness."
  WordPress:
    Projects:
      Block with ACF:
        Overview: "Create custom blocks using Advanced Custom Fields (ACF) in WordPress. This project involves creating custom Gutenberg blocks using ACF to enhance the content editing experience."
        Steps:
          - "Install and configure ACF plugin"
          - "Create a custom block type"
          - "Define custom fields for the block"
          - "Render the block on the frontend"
          - "Test and debug the block"
        Resources:
          - "ACF Documentation: https://www.advancedcustomfields.com/resources/"
          - "Creating Custom Blocks with ACF: https://www.advancedcustomfields.com/blog/building-gutenberg-blocks-with-acf/"
        Notes: "Keep track of issues and enhancements during the project"
        Technologie:
          Advanced Custom Fields (ACF):
            Overview: "ACF is a powerful WordPress plugin that allows you to add custom fields to your WordPress edit screens. These fields can be used to create custom content management experiences."
            Features:
              - "Flexible Content: Add flexible content fields to create layouts that adapt to your content needs."
              - "Repeater Fields: Add repeatable fields for any type of content."
              - "Field Groups: Organize fields into groups for better management."
              - "Custom Blocks: Create custom Gutenberg blocks with ACF fields."
              - "Conditional Logic: Show or hide fields based on other field values."
              - "Developer Friendly: Easily integrate ACF fields into your themes and plugins."
            Installation:
              - "Download and install the ACF plugin from the WordPress plugin repository."
              - "Activate the plugin from the WordPress admin dashboard."
              - "Configure global settings and add field groups from the ACF admin menu."
            Usage:
              - "Creating Field Groups: Navigate to the ACF admin menu and create field groups with various field types."
              - "Adding Fields to Posts: Add custom fields to posts, pages, and custom post types using field groups."
              - "Displaying Fields: Use PHP functions to display field values in your theme templates."
              - "Creating Custom Blocks: Use ACF to create custom Gutenberg blocks with custom fields."
            Resources:
              - "Getting Started with ACF: https://www.advancedcustomfields.com/resources/getting-started/"
              - "ACF Field Types: https://www.advancedcustomfields.com/resources/#field-types"
              - "ACF in Theme Development: https://www.advancedcustomfields.com/resources/adding-fields-theme/"
              - "ACF and Gutenberg: https://www.advancedcustomfields.com/resources/blocks/"
              - "ACF Pro Documentation: https://www.advancedcustomfields.com/pro/"
            Notes: "Experiment with different field types and configurations to fully utilize ACF's capabilities."
      WordPress Database:
        Overview: "Understand the structure and management of the WordPress database, including tables, relationships, and custom queries."
